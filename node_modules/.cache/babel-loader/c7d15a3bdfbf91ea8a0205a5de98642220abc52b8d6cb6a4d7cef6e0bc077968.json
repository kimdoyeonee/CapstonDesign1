{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadlineParser = void 0;\nconst parser_delimiter_1 = require(\"@serialport/parser-delimiter\");\n/**\n *  A transform stream that emits data after a newline delimiter is received.\n * @summary To use the `Readline` parser, provide a delimiter (defaults to `\\n`). Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n */\nclass ReadlineParser extends parser_delimiter_1.DelimiterParser {\n  constructor(options) {\n    const opts = {\n      delimiter: Buffer.from('\\n', 'utf8'),\n      encoding: 'utf8',\n      ...options\n    };\n    if (typeof opts.delimiter === 'string') {\n      opts.delimiter = Buffer.from(opts.delimiter, opts.encoding);\n    }\n    super(opts);\n  }\n}\nexports.ReadlineParser = ReadlineParser;","map":{"version":3,"names":["Object","defineProperty","exports","value","ReadlineParser","parser_delimiter_1","require","DelimiterParser","constructor","options","opts","delimiter","Buffer","from","encoding"],"sources":["/Users/kimdoyeon/Desktop/CapstonDesign1/node_modules/@serialport/parser-readline/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadlineParser = void 0;\nconst parser_delimiter_1 = require(\"@serialport/parser-delimiter\");\n/**\n *  A transform stream that emits data after a newline delimiter is received.\n * @summary To use the `Readline` parser, provide a delimiter (defaults to `\\n`). Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n */\nclass ReadlineParser extends parser_delimiter_1.DelimiterParser {\n    constructor(options) {\n        const opts = {\n            delimiter: Buffer.from('\\n', 'utf8'),\n            encoding: 'utf8',\n            ...options,\n        };\n        if (typeof opts.delimiter === 'string') {\n            opts.delimiter = Buffer.from(opts.delimiter, opts.encoding);\n        }\n        super(opts);\n    }\n}\nexports.ReadlineParser = ReadlineParser;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAC/B,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,8BAA8B,CAAC;AAClE;AACA;AACA;AACA;AACA,MAAMF,cAAc,SAASC,kBAAkB,CAACE,eAAe,CAAC;EAC5DC,WAAWA,CAACC,OAAO,EAAE;IACjB,MAAMC,IAAI,GAAG;MACTC,SAAS,EAAEC,MAAM,CAACC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;MACpCC,QAAQ,EAAE,MAAM;MAChB,GAAGL;IACP,CAAC;IACD,IAAI,OAAOC,IAAI,CAACC,SAAS,KAAK,QAAQ,EAAE;MACpCD,IAAI,CAACC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACH,IAAI,CAACC,SAAS,EAAED,IAAI,CAACI,QAAQ,CAAC;IAC/D;IACA,KAAK,CAACJ,IAAI,CAAC;EACf;AACJ;AACAR,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}