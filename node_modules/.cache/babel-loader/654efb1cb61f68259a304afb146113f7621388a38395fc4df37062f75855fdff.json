{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.linuxList = void 0;\nconst child_process_1 = require(\"child_process\");\nconst parser_readline_1 = require(\"@serialport/parser-readline\");\n// get only serial port names\nfunction checkPathOfDevice(path) {\n  return /(tty(S|WCH|ACM|USB|AMA|MFD|O|XRUSB)|rfcomm)/.test(path) && path;\n}\nfunction propName(name) {\n  return {\n    DEVNAME: 'path',\n    ID_VENDOR_ENC: 'manufacturer',\n    ID_SERIAL_SHORT: 'serialNumber',\n    ID_VENDOR_ID: 'vendorId',\n    ID_MODEL_ID: 'productId',\n    DEVLINKS: 'pnpId',\n    /**\n    * Workaround for systemd defect\n    * see https://github.com/serialport/bindings-cpp/issues/115\n    */\n    ID_USB_VENDOR_ENC: 'manufacturer',\n    ID_USB_SERIAL_SHORT: 'serialNumber',\n    ID_USB_VENDOR_ID: 'vendorId',\n    ID_USB_MODEL_ID: 'productId'\n    // End of workaround\n  }[name.toUpperCase()];\n}\nfunction decodeHexEscape(str) {\n  return str.replace(/\\\\x([a-fA-F0-9]{2})/g, (a, b) => {\n    return String.fromCharCode(parseInt(b, 16));\n  });\n}\nfunction propVal(name, val) {\n  if (name === 'pnpId') {\n    const match = val.match(/\\/by-id\\/([^\\s]+)/);\n    return (match === null || match === void 0 ? void 0 : match[1]) || undefined;\n  }\n  if (name === 'manufacturer') {\n    return decodeHexEscape(val);\n  }\n  if (/^0x/.test(val)) {\n    return val.substr(2);\n  }\n  return val;\n}\nfunction linuxList(spawnCmd = child_process_1.spawn) {\n  const ports = [];\n  const udevadm = spawnCmd('udevadm', ['info', '-e']);\n  const lines = udevadm.stdout.pipe(new parser_readline_1.ReadlineParser());\n  let skipPort = false;\n  let port = {\n    path: '',\n    manufacturer: undefined,\n    serialNumber: undefined,\n    pnpId: undefined,\n    locationId: undefined,\n    vendorId: undefined,\n    productId: undefined\n  };\n  lines.on('data', line => {\n    const lineType = line.slice(0, 1);\n    const data = line.slice(3);\n    // new port entry\n    if (lineType === 'P') {\n      port = {\n        path: '',\n        manufacturer: undefined,\n        serialNumber: undefined,\n        pnpId: undefined,\n        locationId: undefined,\n        vendorId: undefined,\n        productId: undefined\n      };\n      skipPort = false;\n      return;\n    }\n    if (skipPort) {\n      return;\n    }\n    // Check dev name and save port if it matches flag to skip the rest of the data if not\n    if (lineType === 'N') {\n      if (checkPathOfDevice(data)) {\n        ports.push(port);\n      } else {\n        skipPort = true;\n      }\n      return;\n    }\n    // parse data about each port\n    if (lineType === 'E') {\n      const keyValue = data.match(/^(.+)=(.*)/);\n      if (!keyValue) {\n        return;\n      }\n      const key = propName(keyValue[1]);\n      if (!key) {\n        return;\n      }\n      port[key] = propVal(key, keyValue[2]);\n    }\n  });\n  return new Promise((resolve, reject) => {\n    udevadm.on('close', code => {\n      if (code) {\n        reject(new Error(`Error listing ports udevadm exited with error code: ${code}`));\n      }\n    });\n    udevadm.on('error', reject);\n    lines.on('error', reject);\n    lines.on('finish', () => resolve(ports));\n  });\n}\nexports.linuxList = linuxList;","map":{"version":3,"names":["Object","defineProperty","exports","value","linuxList","child_process_1","require","parser_readline_1","checkPathOfDevice","path","test","propName","name","DEVNAME","ID_VENDOR_ENC","ID_SERIAL_SHORT","ID_VENDOR_ID","ID_MODEL_ID","DEVLINKS","ID_USB_VENDOR_ENC","ID_USB_SERIAL_SHORT","ID_USB_VENDOR_ID","ID_USB_MODEL_ID","toUpperCase","decodeHexEscape","str","replace","a","b","String","fromCharCode","parseInt","propVal","val","match","undefined","substr","spawnCmd","spawn","ports","udevadm","lines","stdout","pipe","ReadlineParser","skipPort","port","manufacturer","serialNumber","pnpId","locationId","vendorId","productId","on","line","lineType","slice","data","push","keyValue","key","Promise","resolve","reject","code","Error"],"sources":["/Users/kimdoyeon/Desktop/CapstonDesign1/node_modules/@serialport/bindings-cpp/dist/linux-list.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.linuxList = void 0;\nconst child_process_1 = require(\"child_process\");\nconst parser_readline_1 = require(\"@serialport/parser-readline\");\n// get only serial port names\nfunction checkPathOfDevice(path) {\n    return /(tty(S|WCH|ACM|USB|AMA|MFD|O|XRUSB)|rfcomm)/.test(path) && path;\n}\nfunction propName(name) {\n    return {\n        DEVNAME: 'path',\n        ID_VENDOR_ENC: 'manufacturer',\n        ID_SERIAL_SHORT: 'serialNumber',\n        ID_VENDOR_ID: 'vendorId',\n        ID_MODEL_ID: 'productId',\n        DEVLINKS: 'pnpId',\n        /**\n        * Workaround for systemd defect\n        * see https://github.com/serialport/bindings-cpp/issues/115\n        */\n        ID_USB_VENDOR_ENC: 'manufacturer',\n        ID_USB_SERIAL_SHORT: 'serialNumber',\n        ID_USB_VENDOR_ID: 'vendorId',\n        ID_USB_MODEL_ID: 'productId',\n        // End of workaround\n    }[name.toUpperCase()];\n}\nfunction decodeHexEscape(str) {\n    return str.replace(/\\\\x([a-fA-F0-9]{2})/g, (a, b) => {\n        return String.fromCharCode(parseInt(b, 16));\n    });\n}\nfunction propVal(name, val) {\n    if (name === 'pnpId') {\n        const match = val.match(/\\/by-id\\/([^\\s]+)/);\n        return (match === null || match === void 0 ? void 0 : match[1]) || undefined;\n    }\n    if (name === 'manufacturer') {\n        return decodeHexEscape(val);\n    }\n    if (/^0x/.test(val)) {\n        return val.substr(2);\n    }\n    return val;\n}\nfunction linuxList(spawnCmd = child_process_1.spawn) {\n    const ports = [];\n    const udevadm = spawnCmd('udevadm', ['info', '-e']);\n    const lines = udevadm.stdout.pipe(new parser_readline_1.ReadlineParser());\n    let skipPort = false;\n    let port = {\n        path: '',\n        manufacturer: undefined,\n        serialNumber: undefined,\n        pnpId: undefined,\n        locationId: undefined,\n        vendorId: undefined,\n        productId: undefined,\n    };\n    lines.on('data', (line) => {\n        const lineType = line.slice(0, 1);\n        const data = line.slice(3);\n        // new port entry\n        if (lineType === 'P') {\n            port = {\n                path: '',\n                manufacturer: undefined,\n                serialNumber: undefined,\n                pnpId: undefined,\n                locationId: undefined,\n                vendorId: undefined,\n                productId: undefined,\n            };\n            skipPort = false;\n            return;\n        }\n        if (skipPort) {\n            return;\n        }\n        // Check dev name and save port if it matches flag to skip the rest of the data if not\n        if (lineType === 'N') {\n            if (checkPathOfDevice(data)) {\n                ports.push(port);\n            }\n            else {\n                skipPort = true;\n            }\n            return;\n        }\n        // parse data about each port\n        if (lineType === 'E') {\n            const keyValue = data.match(/^(.+)=(.*)/);\n            if (!keyValue) {\n                return;\n            }\n            const key = propName(keyValue[1]);\n            if (!key) {\n                return;\n            }\n            port[key] = propVal(key, keyValue[2]);\n        }\n    });\n    return new Promise((resolve, reject) => {\n        udevadm.on('close', (code) => {\n            if (code) {\n                reject(new Error(`Error listing ports udevadm exited with error code: ${code}`));\n            }\n        });\n        udevadm.on('error', reject);\n        lines.on('error', reject);\n        lines.on('finish', () => resolve(ports));\n    });\n}\nexports.linuxList = linuxList;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}