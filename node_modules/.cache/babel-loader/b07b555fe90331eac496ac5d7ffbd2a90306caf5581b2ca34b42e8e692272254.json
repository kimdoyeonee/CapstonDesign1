{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unixWrite = void 0;\nconst fs_1 = require(\"fs\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst util_1 = require(\"util\");\nconst logger = (0, debug_1.default)('serialport/bindings-cpp/unixWrite');\nconst writeAsync = (0, util_1.promisify)(fs_1.write);\nconst writable = binding => {\n  return new Promise((resolve, reject) => {\n    binding.poller.once('writable', err => err ? reject(err) : resolve());\n  });\n};\nconst unixWrite = async ({\n  binding,\n  buffer,\n  offset = 0,\n  fsWriteAsync = writeAsync\n}) => {\n  const bytesToWrite = buffer.length - offset;\n  logger('Starting write', buffer.length, 'bytes offset', offset, 'bytesToWrite', bytesToWrite);\n  if (!binding.isOpen || !binding.fd) {\n    throw new Error('Port is not open');\n  }\n  try {\n    const {\n      bytesWritten\n    } = await fsWriteAsync(binding.fd, buffer, offset, bytesToWrite);\n    logger('write returned: wrote', bytesWritten, 'bytes');\n    if (bytesWritten + offset < buffer.length) {\n      if (!binding.isOpen) {\n        throw new Error('Port is not open');\n      }\n      return (0, exports.unixWrite)({\n        binding,\n        buffer,\n        offset: bytesWritten + offset,\n        fsWriteAsync\n      });\n    }\n    logger('Finished writing', bytesWritten + offset, 'bytes');\n  } catch (err) {\n    logger('write errored', err);\n    if (err.code === 'EAGAIN' || err.code === 'EWOULDBLOCK' || err.code === 'EINTR') {\n      if (!binding.isOpen) {\n        throw new Error('Port is not open');\n      }\n      logger('waiting for writable because of code:', err.code);\n      await writable(binding);\n      return (0, exports.unixWrite)({\n        binding,\n        buffer,\n        offset,\n        fsWriteAsync\n      });\n    }\n    const disconnectError = err.code === 'EBADF' ||\n    // Bad file number means we got closed\n    err.code === 'ENXIO' ||\n    // No such device or address probably usb disconnect\n    err.code === 'UNKNOWN' || err.errno === -1; // generic error\n    if (disconnectError) {\n      err.disconnect = true;\n      logger('disconnecting', err);\n    }\n    logger('error', err);\n    throw err;\n  }\n};\nexports.unixWrite = unixWrite;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","unixWrite","fs_1","require","debug_1","util_1","logger","default","writeAsync","promisify","write","writable","binding","Promise","resolve","reject","poller","once","err","buffer","offset","fsWriteAsync","bytesToWrite","length","isOpen","fd","Error","bytesWritten","code","disconnectError","errno","disconnect"],"sources":["/Users/kimdoyeon/Desktop/CapstonDesign1/node_modules/@serialport/bindings-cpp/dist/unix-write.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unixWrite = void 0;\nconst fs_1 = require(\"fs\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst util_1 = require(\"util\");\nconst logger = (0, debug_1.default)('serialport/bindings-cpp/unixWrite');\nconst writeAsync = (0, util_1.promisify)(fs_1.write);\nconst writable = (binding) => {\n    return new Promise((resolve, reject) => {\n        binding.poller.once('writable', err => (err ? reject(err) : resolve()));\n    });\n};\nconst unixWrite = async ({ binding, buffer, offset = 0, fsWriteAsync = writeAsync }) => {\n    const bytesToWrite = buffer.length - offset;\n    logger('Starting write', buffer.length, 'bytes offset', offset, 'bytesToWrite', bytesToWrite);\n    if (!binding.isOpen || !binding.fd) {\n        throw new Error('Port is not open');\n    }\n    try {\n        const { bytesWritten } = await fsWriteAsync(binding.fd, buffer, offset, bytesToWrite);\n        logger('write returned: wrote', bytesWritten, 'bytes');\n        if (bytesWritten + offset < buffer.length) {\n            if (!binding.isOpen) {\n                throw new Error('Port is not open');\n            }\n            return (0, exports.unixWrite)({ binding, buffer, offset: bytesWritten + offset, fsWriteAsync });\n        }\n        logger('Finished writing', bytesWritten + offset, 'bytes');\n    }\n    catch (err) {\n        logger('write errored', err);\n        if (err.code === 'EAGAIN' || err.code === 'EWOULDBLOCK' || err.code === 'EINTR') {\n            if (!binding.isOpen) {\n                throw new Error('Port is not open');\n            }\n            logger('waiting for writable because of code:', err.code);\n            await writable(binding);\n            return (0, exports.unixWrite)({ binding, buffer, offset, fsWriteAsync });\n        }\n        const disconnectError = err.code === 'EBADF' || // Bad file number means we got closed\n            err.code === 'ENXIO' || // No such device or address probably usb disconnect\n            err.code === 'UNKNOWN' ||\n            err.errno === -1; // generic error\n        if (disconnectError) {\n            err.disconnect = true;\n            logger('disconnecting', err);\n        }\n        logger('error', err);\n        throw err;\n    }\n};\nexports.unixWrite = unixWrite;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}