{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LinuxPortBinding = exports.LinuxBinding = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst linux_list_1 = require(\"./linux-list\");\nconst poller_1 = require(\"./poller\");\nconst unix_read_1 = require(\"./unix-read\");\nconst unix_write_1 = require(\"./unix-write\");\nconst load_bindings_1 = require(\"./load-bindings\");\nconst debug = (0, debug_1.default)('serialport/bindings-cpp');\nexports.LinuxBinding = {\n  list() {\n    debug('list');\n    return (0, linux_list_1.linuxList)();\n  },\n  async open(options) {\n    if (!options || typeof options !== 'object' || Array.isArray(options)) {\n      throw new TypeError('\"options\" is not an object');\n    }\n    if (!options.path) {\n      throw new TypeError('\"path\" is not a valid port');\n    }\n    if (!options.baudRate) {\n      throw new TypeError('\"baudRate\" is not a valid baudRate');\n    }\n    debug('open');\n    const openOptions = Object.assign({\n      vmin: 1,\n      vtime: 0,\n      dataBits: 8,\n      lock: true,\n      stopBits: 1,\n      parity: 'none',\n      rtscts: false,\n      xon: false,\n      xoff: false,\n      xany: false,\n      hupcl: true\n    }, options);\n    const fd = await (0, load_bindings_1.asyncOpen)(openOptions.path, openOptions);\n    this.fd = fd;\n    return new LinuxPortBinding(fd, openOptions);\n  }\n};\n/**\n * The linux binding layer\n */\nclass LinuxPortBinding {\n  constructor(fd, openOptions) {\n    this.fd = fd;\n    this.openOptions = openOptions;\n    this.poller = new poller_1.Poller(fd);\n    this.writeOperation = null;\n  }\n  get isOpen() {\n    return this.fd !== null;\n  }\n  async close() {\n    debug('close');\n    if (!this.isOpen) {\n      throw new Error('Port is not open');\n    }\n    const fd = this.fd;\n    this.poller.stop();\n    this.poller.destroy();\n    this.fd = null;\n    await (0, load_bindings_1.asyncClose)(fd);\n  }\n  async read(buffer, offset, length) {\n    if (!Buffer.isBuffer(buffer)) {\n      throw new TypeError('\"buffer\" is not a Buffer');\n    }\n    if (typeof offset !== 'number' || isNaN(offset)) {\n      throw new TypeError(`\"offset\" is not an integer got \"${isNaN(offset) ? 'NaN' : typeof offset}\"`);\n    }\n    if (typeof length !== 'number' || isNaN(length)) {\n      throw new TypeError(`\"length\" is not an integer got \"${isNaN(length) ? 'NaN' : typeof length}\"`);\n    }\n    debug('read');\n    if (buffer.length < offset + length) {\n      throw new Error('buffer is too small');\n    }\n    if (!this.isOpen) {\n      throw new Error('Port is not open');\n    }\n    return (0, unix_read_1.unixRead)({\n      binding: this,\n      buffer,\n      offset,\n      length\n    });\n  }\n  async write(buffer) {\n    if (!Buffer.isBuffer(buffer)) {\n      throw new TypeError('\"buffer\" is not a Buffer');\n    }\n    debug('write', buffer.length, 'bytes');\n    if (!this.isOpen) {\n      debug('write', 'error port is not open');\n      throw new Error('Port is not open');\n    }\n    this.writeOperation = (async () => {\n      if (buffer.length === 0) {\n        return;\n      }\n      await (0, unix_write_1.unixWrite)({\n        binding: this,\n        buffer\n      });\n      this.writeOperation = null;\n    })();\n    return this.writeOperation;\n  }\n  async update(options) {\n    if (!options || typeof options !== 'object' || Array.isArray(options)) {\n      throw TypeError('\"options\" is not an object');\n    }\n    if (typeof options.baudRate !== 'number') {\n      throw new TypeError('\"options.baudRate\" is not a number');\n    }\n    debug('update');\n    if (!this.isOpen) {\n      throw new Error('Port is not open');\n    }\n    await (0, load_bindings_1.asyncUpdate)(this.fd, options);\n  }\n  async set(options) {\n    if (!options || typeof options !== 'object' || Array.isArray(options)) {\n      throw new TypeError('\"options\" is not an object');\n    }\n    debug('set');\n    if (!this.isOpen) {\n      throw new Error('Port is not open');\n    }\n    await (0, load_bindings_1.asyncSet)(this.fd, options);\n  }\n  async get() {\n    debug('get');\n    if (!this.isOpen) {\n      throw new Error('Port is not open');\n    }\n    return (0, load_bindings_1.asyncGet)(this.fd);\n  }\n  async getBaudRate() {\n    debug('getBaudRate');\n    if (!this.isOpen) {\n      throw new Error('Port is not open');\n    }\n    return (0, load_bindings_1.asyncGetBaudRate)(this.fd);\n  }\n  async flush() {\n    debug('flush');\n    if (!this.isOpen) {\n      throw new Error('Port is not open');\n    }\n    await (0, load_bindings_1.asyncFlush)(this.fd);\n  }\n  async drain() {\n    debug('drain');\n    if (!this.isOpen) {\n      throw new Error('Port is not open');\n    }\n    await this.writeOperation;\n    await (0, load_bindings_1.asyncDrain)(this.fd);\n  }\n}\nexports.LinuxPortBinding = LinuxPortBinding;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","LinuxPortBinding","LinuxBinding","debug_1","require","linux_list_1","poller_1","unix_read_1","unix_write_1","load_bindings_1","debug","default","list","linuxList","open","options","Array","isArray","TypeError","path","baudRate","openOptions","assign","vmin","vtime","dataBits","lock","stopBits","parity","rtscts","xon","xoff","xany","hupcl","fd","asyncOpen","constructor","poller","Poller","writeOperation","isOpen","close","Error","stop","destroy","asyncClose","read","buffer","offset","length","Buffer","isBuffer","isNaN","unixRead","binding","write","unixWrite","update","asyncUpdate","set","asyncSet","get","asyncGet","getBaudRate","asyncGetBaudRate","flush","asyncFlush","drain","asyncDrain"],"sources":["/Users/kimdoyeon/Desktop/CapstonDesign1/node_modules/@serialport/bindings-cpp/dist/linux.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LinuxPortBinding = exports.LinuxBinding = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst linux_list_1 = require(\"./linux-list\");\nconst poller_1 = require(\"./poller\");\nconst unix_read_1 = require(\"./unix-read\");\nconst unix_write_1 = require(\"./unix-write\");\nconst load_bindings_1 = require(\"./load-bindings\");\nconst debug = (0, debug_1.default)('serialport/bindings-cpp');\nexports.LinuxBinding = {\n    list() {\n        debug('list');\n        return (0, linux_list_1.linuxList)();\n    },\n    async open(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw new TypeError('\"options\" is not an object');\n        }\n        if (!options.path) {\n            throw new TypeError('\"path\" is not a valid port');\n        }\n        if (!options.baudRate) {\n            throw new TypeError('\"baudRate\" is not a valid baudRate');\n        }\n        debug('open');\n        const openOptions = Object.assign({ vmin: 1, vtime: 0, dataBits: 8, lock: true, stopBits: 1, parity: 'none', rtscts: false, xon: false, xoff: false, xany: false, hupcl: true }, options);\n        const fd = await (0, load_bindings_1.asyncOpen)(openOptions.path, openOptions);\n        this.fd = fd;\n        return new LinuxPortBinding(fd, openOptions);\n    },\n};\n/**\n * The linux binding layer\n */\nclass LinuxPortBinding {\n    constructor(fd, openOptions) {\n        this.fd = fd;\n        this.openOptions = openOptions;\n        this.poller = new poller_1.Poller(fd);\n        this.writeOperation = null;\n    }\n    get isOpen() {\n        return this.fd !== null;\n    }\n    async close() {\n        debug('close');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        const fd = this.fd;\n        this.poller.stop();\n        this.poller.destroy();\n        this.fd = null;\n        await (0, load_bindings_1.asyncClose)(fd);\n    }\n    async read(buffer, offset, length) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        if (typeof offset !== 'number' || isNaN(offset)) {\n            throw new TypeError(`\"offset\" is not an integer got \"${isNaN(offset) ? 'NaN' : typeof offset}\"`);\n        }\n        if (typeof length !== 'number' || isNaN(length)) {\n            throw new TypeError(`\"length\" is not an integer got \"${isNaN(length) ? 'NaN' : typeof length}\"`);\n        }\n        debug('read');\n        if (buffer.length < offset + length) {\n            throw new Error('buffer is too small');\n        }\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, unix_read_1.unixRead)({ binding: this, buffer, offset, length });\n    }\n    async write(buffer) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        debug('write', buffer.length, 'bytes');\n        if (!this.isOpen) {\n            debug('write', 'error port is not open');\n            throw new Error('Port is not open');\n        }\n        this.writeOperation = (async () => {\n            if (buffer.length === 0) {\n                return;\n            }\n            await (0, unix_write_1.unixWrite)({ binding: this, buffer });\n            this.writeOperation = null;\n        })();\n        return this.writeOperation;\n    }\n    async update(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw TypeError('\"options\" is not an object');\n        }\n        if (typeof options.baudRate !== 'number') {\n            throw new TypeError('\"options.baudRate\" is not a number');\n        }\n        debug('update');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncUpdate)(this.fd, options);\n    }\n    async set(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw new TypeError('\"options\" is not an object');\n        }\n        debug('set');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncSet)(this.fd, options);\n    }\n    async get() {\n        debug('get');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, load_bindings_1.asyncGet)(this.fd);\n    }\n    async getBaudRate() {\n        debug('getBaudRate');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, load_bindings_1.asyncGetBaudRate)(this.fd);\n    }\n    async flush() {\n        debug('flush');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncFlush)(this.fd);\n    }\n    async drain() {\n        debug('drain');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await this.writeOperation;\n        await (0, load_bindings_1.asyncDrain)(this.fd);\n    }\n}\nexports.LinuxPortBinding = LinuxPortBinding;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}