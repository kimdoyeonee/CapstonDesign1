{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DelimiterParser = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * A transform stream that emits data each time a byte sequence is received.\n * @extends Transform\n *\n * To use the `Delimiter` parser, provide a delimiter as a string, buffer, or array of bytes. Runs in O(n) time.\n */\nclass DelimiterParser extends stream_1.Transform {\n  constructor({\n    delimiter,\n    includeDelimiter = false,\n    ...options\n  }) {\n    super(options);\n    if (delimiter === undefined) {\n      throw new TypeError('\"delimiter\" is not a bufferable object');\n    }\n    if (delimiter.length === 0) {\n      throw new TypeError('\"delimiter\" has a 0 or undefined length');\n    }\n    this.includeDelimiter = includeDelimiter;\n    this.delimiter = Buffer.from(delimiter);\n    this.buffer = Buffer.alloc(0);\n  }\n  _transform(chunk, encoding, cb) {\n    let data = Buffer.concat([this.buffer, chunk]);\n    let position;\n    while ((position = data.indexOf(this.delimiter)) !== -1) {\n      this.push(data.slice(0, position + (this.includeDelimiter ? this.delimiter.length : 0)));\n      data = data.slice(position + this.delimiter.length);\n    }\n    this.buffer = data;\n    cb();\n  }\n  _flush(cb) {\n    this.push(this.buffer);\n    this.buffer = Buffer.alloc(0);\n    cb();\n  }\n}\nexports.DelimiterParser = DelimiterParser;","map":{"version":3,"names":["Object","defineProperty","exports","value","DelimiterParser","stream_1","require","Transform","constructor","delimiter","includeDelimiter","options","undefined","TypeError","length","Buffer","from","buffer","alloc","_transform","chunk","encoding","cb","data","concat","position","indexOf","push","slice","_flush"],"sources":["/Users/kimdoyeon/Desktop/CapstonDesign1/node_modules/@serialport/bindings-cpp/node_modules/@serialport/parser-delimiter/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DelimiterParser = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * A transform stream that emits data each time a byte sequence is received.\n * @extends Transform\n *\n * To use the `Delimiter` parser, provide a delimiter as a string, buffer, or array of bytes. Runs in O(n) time.\n */\nclass DelimiterParser extends stream_1.Transform {\n    constructor({ delimiter, includeDelimiter = false, ...options }) {\n        super(options);\n        if (delimiter === undefined) {\n            throw new TypeError('\"delimiter\" is not a bufferable object');\n        }\n        if (delimiter.length === 0) {\n            throw new TypeError('\"delimiter\" has a 0 or undefined length');\n        }\n        this.includeDelimiter = includeDelimiter;\n        this.delimiter = Buffer.from(delimiter);\n        this.buffer = Buffer.alloc(0);\n    }\n    _transform(chunk, encoding, cb) {\n        let data = Buffer.concat([this.buffer, chunk]);\n        let position;\n        while ((position = data.indexOf(this.delimiter)) !== -1) {\n            this.push(data.slice(0, position + (this.includeDelimiter ? this.delimiter.length : 0)));\n            data = data.slice(position + this.delimiter.length);\n        }\n        this.buffer = data;\n        cb();\n    }\n    _flush(cb) {\n        this.push(this.buffer);\n        this.buffer = Buffer.alloc(0);\n        cb();\n    }\n}\nexports.DelimiterParser = DelimiterParser;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAChC,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,eAAe,SAASC,QAAQ,CAACE,SAAS,CAAC;EAC7CC,WAAWA,CAAC;IAAEC,SAAS;IAAEC,gBAAgB,GAAG,KAAK;IAAE,GAAGC;EAAQ,CAAC,EAAE;IAC7D,KAAK,CAACA,OAAO,CAAC;IACd,IAAIF,SAAS,KAAKG,SAAS,EAAE;MACzB,MAAM,IAAIC,SAAS,CAAC,wCAAwC,CAAC;IACjE;IACA,IAAIJ,SAAS,CAACK,MAAM,KAAK,CAAC,EAAE;MACxB,MAAM,IAAID,SAAS,CAAC,yCAAyC,CAAC;IAClE;IACA,IAAI,CAACH,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACD,SAAS,GAAGM,MAAM,CAACC,IAAI,CAACP,SAAS,CAAC;IACvC,IAAI,CAACQ,MAAM,GAAGF,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC;EACjC;EACAC,UAAUA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,EAAE,EAAE;IAC5B,IAAIC,IAAI,GAAGR,MAAM,CAACS,MAAM,CAAC,CAAC,IAAI,CAACP,MAAM,EAAEG,KAAK,CAAC,CAAC;IAC9C,IAAIK,QAAQ;IACZ,OAAO,CAACA,QAAQ,GAAGF,IAAI,CAACG,OAAO,CAAC,IAAI,CAACjB,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE;MACrD,IAAI,CAACkB,IAAI,CAACJ,IAAI,CAACK,KAAK,CAAC,CAAC,EAAEH,QAAQ,IAAI,IAAI,CAACf,gBAAgB,GAAG,IAAI,CAACD,SAAS,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;MACxFS,IAAI,GAAGA,IAAI,CAACK,KAAK,CAACH,QAAQ,GAAG,IAAI,CAAChB,SAAS,CAACK,MAAM,CAAC;IACvD;IACA,IAAI,CAACG,MAAM,GAAGM,IAAI;IAClBD,EAAE,CAAC,CAAC;EACR;EACAO,MAAMA,CAACP,EAAE,EAAE;IACP,IAAI,CAACK,IAAI,CAAC,IAAI,CAACV,MAAM,CAAC;IACtB,IAAI,CAACA,MAAM,GAAGF,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC;IAC7BI,EAAE,CAAC,CAAC;EACR;AACJ;AACApB,OAAO,CAACE,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}