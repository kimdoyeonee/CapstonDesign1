{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertHeaderBufferToObj = exports.HEADER_LENGTH = void 0;\nexports.HEADER_LENGTH = 6;\n/**\n * For numbers less than 255, will ensure that their string representation is at least 8 characters long.\n */\nconst toOctetStr = num => {\n  let str = Number(num).toString(2);\n  while (str.length < 8) {\n    str = `0${str}`;\n  }\n  return str;\n};\n/**\n * Converts a Buffer of any length to an Object representation of a Space Packet header, provided\n * the received data is in the correct format.\n * @param buf - The buffer containing the Space Packet Header Data\n */\nconst convertHeaderBufferToObj = buf => {\n  const headerStr = Array.from(buf.slice(0, exports.HEADER_LENGTH)).reduce((accum, curr) => `${accum}${toOctetStr(curr)}`, '');\n  const isVersion1 = headerStr.slice(0, 3) === '000';\n  const versionNumber = isVersion1 ? 1 : 'UNKNOWN_VERSION';\n  const type = Number(headerStr[3]);\n  const secondaryHeader = Number(headerStr[4]);\n  const apid = parseInt(headerStr.slice(5, 16), 2);\n  const sequenceFlags = parseInt(headerStr.slice(16, 18), 2);\n  const packetName = parseInt(headerStr.slice(18, 32), 2);\n  const dataLength = parseInt(headerStr.slice(-16), 2) + 1;\n  return {\n    versionNumber,\n    identification: {\n      apid,\n      secondaryHeader,\n      type\n    },\n    sequenceControl: {\n      packetName,\n      sequenceFlags\n    },\n    dataLength\n  };\n};\nexports.convertHeaderBufferToObj = convertHeaderBufferToObj;","map":{"version":3,"names":["Object","defineProperty","exports","value","convertHeaderBufferToObj","HEADER_LENGTH","toOctetStr","num","str","Number","toString","length","buf","headerStr","Array","from","slice","reduce","accum","curr","isVersion1","versionNumber","type","secondaryHeader","apid","parseInt","sequenceFlags","packetName","dataLength","identification","sequenceControl"],"sources":["/Users/kimdoyeon/Desktop/CapstonDesign1/node_modules/@serialport/parser-spacepacket/dist/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertHeaderBufferToObj = exports.HEADER_LENGTH = void 0;\nexports.HEADER_LENGTH = 6;\n/**\n * For numbers less than 255, will ensure that their string representation is at least 8 characters long.\n */\nconst toOctetStr = (num) => {\n    let str = Number(num).toString(2);\n    while (str.length < 8) {\n        str = `0${str}`;\n    }\n    return str;\n};\n/**\n * Converts a Buffer of any length to an Object representation of a Space Packet header, provided\n * the received data is in the correct format.\n * @param buf - The buffer containing the Space Packet Header Data\n */\nconst convertHeaderBufferToObj = (buf) => {\n    const headerStr = Array.from(buf.slice(0, exports.HEADER_LENGTH)).reduce((accum, curr) => `${accum}${toOctetStr(curr)}`, '');\n    const isVersion1 = headerStr.slice(0, 3) === '000';\n    const versionNumber = isVersion1 ? 1 : 'UNKNOWN_VERSION';\n    const type = Number(headerStr[3]);\n    const secondaryHeader = Number(headerStr[4]);\n    const apid = parseInt(headerStr.slice(5, 16), 2);\n    const sequenceFlags = parseInt(headerStr.slice(16, 18), 2);\n    const packetName = parseInt(headerStr.slice(18, 32), 2);\n    const dataLength = parseInt(headerStr.slice(-16), 2) + 1;\n    return {\n        versionNumber,\n        identification: {\n            apid,\n            secondaryHeader,\n            type,\n        },\n        sequenceControl: {\n            packetName,\n            sequenceFlags,\n        },\n        dataLength,\n    };\n};\nexports.convertHeaderBufferToObj = convertHeaderBufferToObj;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,wBAAwB,GAAGF,OAAO,CAACG,aAAa,GAAG,KAAK,CAAC;AACjEH,OAAO,CAACG,aAAa,GAAG,CAAC;AACzB;AACA;AACA;AACA,MAAMC,UAAU,GAAIC,GAAG,IAAK;EACxB,IAAIC,GAAG,GAAGC,MAAM,CAACF,GAAG,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC;EACjC,OAAOF,GAAG,CAACG,MAAM,GAAG,CAAC,EAAE;IACnBH,GAAG,GAAI,IAAGA,GAAI,EAAC;EACnB;EACA,OAAOA,GAAG;AACd,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAMJ,wBAAwB,GAAIQ,GAAG,IAAK;EACtC,MAAMC,SAAS,GAAGC,KAAK,CAACC,IAAI,CAACH,GAAG,CAACI,KAAK,CAAC,CAAC,EAAEd,OAAO,CAACG,aAAa,CAAC,CAAC,CAACY,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAM,GAAED,KAAM,GAAEZ,UAAU,CAACa,IAAI,CAAE,EAAC,EAAE,EAAE,CAAC;EAC5H,MAAMC,UAAU,GAAGP,SAAS,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK;EAClD,MAAMK,aAAa,GAAGD,UAAU,GAAG,CAAC,GAAG,iBAAiB;EACxD,MAAME,IAAI,GAAGb,MAAM,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC;EACjC,MAAMU,eAAe,GAAGd,MAAM,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAMW,IAAI,GAAGC,QAAQ,CAACZ,SAAS,CAACG,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;EAChD,MAAMU,aAAa,GAAGD,QAAQ,CAACZ,SAAS,CAACG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;EAC1D,MAAMW,UAAU,GAAGF,QAAQ,CAACZ,SAAS,CAACG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;EACvD,MAAMY,UAAU,GAAGH,QAAQ,CAACZ,SAAS,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;EACxD,OAAO;IACHK,aAAa;IACbQ,cAAc,EAAE;MACZL,IAAI;MACJD,eAAe;MACfD;IACJ,CAAC;IACDQ,eAAe,EAAE;MACbH,UAAU;MACVD;IACJ,CAAC;IACDE;EACJ,CAAC;AACL,CAAC;AACD1B,OAAO,CAACE,wBAAwB,GAAGA,wBAAwB"},"metadata":{},"sourceType":"script","externalDependencies":[]}